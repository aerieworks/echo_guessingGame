var AWS = require('aws-sdk');
var UUID = require('uuid');

var Intents = {
  ResponseYes: 'ResponseYes',
  ResponseNo: 'ResponseNo',
  DescribeWhatItIs: 'DescribeWhatItIs',
  DescribeWhatItHas: 'DescribeWhatItHas'
};

var SpeechletResponseBuilder = (function () {
  function addSetterTo(obj, fieldName) {
    obj[fieldName] = function setter(value) {
      this[fieldName] = value;
      return this;
    };
  }

  function SpeechletResponseBuilder() {
    this.speech(null).reprompt(null).cardTitle(null).cardContent(null).shouldEndSession(false);
  }

  var proto = SpeechletResponseBuilder.prototype;
  addSetterTo(proto, 'speech');
  addSetterTo(proto, 'reprompt');
  addSetterTo(proto, 'cardTitle');
  addSetterTo(proto, 'cardContent');
  addSetterTo(proto, 'shouldEndSession');

  proto.build = function build() {
    var response = {
      shouldEndSession: !!this.shouldEndSession
    };
    if (this.speech !== null) {
      response.outputSpeech = {
        type: 'PlainText',
        text: this.speech
      };
    }
    if (this.cardTitle !== null || this.cardContent !== null) {
      response.card = {
        type: 'Simple',
        title: this.cardTitle,
        content: this.cardContent
      };
    }
    if (this.reprompt !== null) {
      response.reprompt = {
        type: 'PlainText',
        text: this.reprompt
      };
    }

    return response;
  };

  return SpeechletResponseBuilder;
})();

var Question = (function () {
  var tableName = 'twenty_questions';
  var firstQuestionId = '6490d3d7-e5ce-41e6-a707-b9d3c379c800';

  function Question(data) {
    this.id = data.Item.question_id.S;
    this.type = data.Item.type.S;
    this.value = data.Item.value.S;
    this.if_yes = data.Item.if_yes ? data.Item.if_yes.S : null;
    this.if_no = data.Item.if_no ? data.Item.if_no.S : null;
  }

  function getQuestion(id, callback) {
    var params = {
      TableName: tableName,
      Key: { question_id: { S: id } },
      ProjectionExpression: 'question_id, #type, #value, if_yes, if_no',
      ExpressionAttributeNames: {
        '#type': 'type',
        '#value': 'value'
      }
    };
    getDb().getItem(params, function (error, data) {
      var question = (error === null) ? new Question(data) : null;
      callback(error, question);
    });
  }

  function getFirstQuestion(callback) {
    getQuestion(firstQuestionId, callback);
  }

  function getQuestionSpeech() {
    return (this.type == QuestionTypes.is_a ? 'Is it ' : 'Does it have ') + this.value + '?';
  }

  function getQuestionReprompt() {
    return this.getQuestionSpeech();
  }

  Question.prototype.getQuestionSpeech = getQuestionSpeech;
  Question.prototype.getQuestionReprompt = getQuestionReprompt;

  return {
    Types: {
      is_a: 'is_a',
      has_a: 'has_a'
    },

    firstQuestionId: firstQuestionId,

    get: getQuestion,
    getFirst: getFirstQuestion
  };
})();


var theGame = (function () {
  function getCurrentQuestion(machine, callback) {
    var questionId = machine.sessionState.path[machine.sessionState.path.length - 1];
    Question.get(questionId, function (error, question) {
      if (error) {
        machine.respondWithError(error);
      } else {
        callback(question);
      }
    });
  }

  var startPrompt = 'Are you ready to play?';
  var startState = new StateMachine.State(function launchHandler(machine) {
      machine.sessionState.path = [ Question.firstQuestionId ];

      machine.respondWith(new SpeechletResponseBuilder()
        .speech('Welcome to The Guessing Game.  Think of something, and I will try to figure out what it is by asking you Yes or No questions.  ' + startPrompt)
        .reprompt(startPrompt)
        .build()
      );

    }
  );

  var waitingForPlayerState = new StateMachine.State(function waitingForPlayerHandler(machine) {
    machine.respondWith(new SpeechletResponseBuilder()
      .speech('OK.  I can give you more time.' + startPrompt)
      .reprompt(startPrompt)
      .build()
    );
  });

  var loadQuestionState = new StateMachine.State(function loadQuestionHandler(machine) {
    getCurrentQuestion(machine, function (question) {
      if (question.isAnswer()) {
        machine.transitionTo(guessAnswerState);
      } else {
        machine.transitionTo(askQuestionState);
      }
    });
  });

  var askQuestionState = new StateMachine.State(function askQuestionHandler(machine) {
    machine.respondWith(new SpeechletResponseBuilder()
      .speech(question.getQuestionSpeech())
      .reprompt(question.getQuestionReprompt())
      .build()
    );
  });

  var questionCorrectState = new StateMachine.State(function questionCorrectHandler(machine) {
    getCurrentQuestion(machine, function (question) {
      machine.sessionState.path.push(question.if_yes);
      machine.transitionTo(loadQuestionState);
    });
  });

  var questionIncorrectState = new StateMachine.State(function questionIncorrectHandler(machine) {
    getCurrentQuestion(machine, function (question) {
      machine.sessionState.path.push(question.if_no);
      machine.transitionTo(loadQuestionState);
    });
  });

  var guessAnswerState = new StateMachine.State(function guessAnswerHandler(machine) {
    getCurrentQuestion(machine, function (question) {
      machine.respondWith(new SpeechletResponseBuilder()
        .speech('OK, I think I\'ve got it.  ' + question.getQuestionSpeech())
        .reprompt(question.getQuestionReprompt())
        .build()
      );
    });
  });


  var answerCorrectState = new StateMachine.State(function answerCorrectHandler(machine) {
    machine.respondWith(new SpeechletResponseBuilder()
      .speech('Yay, I win!  That was fun.  We should play again sometime.')
      .shouldEndSession(true)
      .build()
    );
  });

  var answerIncorrectState = new StateMachine.State(function answerIncorrectHandler(machine) {
    machine.respondWith(new SpeechletResponseBuilder()
      .speech('Oh.  Congratulations, you stumped me!  I guess I\'m not as smart as I thought I was.')
      .shouldEndSession(true)
      .build()
    );
  });

  startState.addTransition(Intents.ResponseYes, loadQuestionState);
  startState.addTransition(Intents.ResponseNo, waitingForPlayerState);
  waitingForPlayerState.addTransition(Intents.ResponseYes, loadQuestionState);
  waitingForPlayerState.addTransition(Intents.ResponseNo, waitingForPlayerState);
  askQuestionState.addTransition(Intents.ResponseYes, questionCorrectState);
  askQuestionState.addTransition(Intents.ResponseNo, questionIncorrectState);
  guessAnswerState.addTransition(Intents.ResponseYes, answerCorrectState);
  guessAnswerState.addTransition(Intents.ResponseNo, answerIncorrectState);

  return new StateMachine(startState);
})();

/**
 * This sample shows how to create a simple Lambda function for handling speechlet requests.
 */

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = function (event, context) {
  try {
    console.log("event.session.application.applicationId=" + event.session.application.applicationId);

    /**
     * Uncomment this if statement and replace application.id with yours
     * to prevent other voice applications from using this function.
     */
    if (event.session.application.applicationId !== "amzn1.echo-sdk-ams.app.d4c25657-d28c-4191-afcc-b9b22f63b940") {
      context.fail("Invalid Application ID");
    }

    if (event.session.new) {
      onSessionStarted({requestId: event.request.requestId}, event.session);
    }

    if (event.request.type === "LaunchRequest") {
      theGame.start(event.request, event.session, context);
    }  else if (event.request.type === "IntentRequest") {
      theGame.resume(event.request, event.session, context);
    } else if (event.request.type === "SessionEndedRequest") {
      context.succeed();
    }
  } catch (e) {
    context.fail("Exception: " + e);
  }
};

var getDb = (function () {
  var db = null;

  return (function _getDb() {
  if (db === null) {
    db = new AWS.DynamoDB({
    region: 'us-east-1',
    accessKeyId: 'AKIAIOP2T4XJJFOX4F4A',
    secretAccessKey: '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',
    maxRetries: 5,
    sslEnabled: true,
    logger: console
    });
  }
  return db;
  });
})();

function askAQuestion(sessionAttributes, question, callback) {
  sessionAttributes.path.push(question.question_id);
  var cardTitle = "Question " + sessionAttributes.path.length;
  var speech = (question.type == QuestionTypes.is_a ? 'Is it ' : 'Does it have ') + question.value + '?';
  callback(sessionAttributes, buildSpeechletResponse(cardTitle, speech, speech, false));
}
